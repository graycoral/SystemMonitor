// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_monitor.proto

#ifndef PROTOBUF_INCLUDED_system_5fmonitor_2eproto
#define PROTOBUF_INCLUDED_system_5fmonitor_2eproto

#include <google/protobuf/stubs/common.h>

#include <string>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_system_5fmonitor_2eproto

namespace protobuf_system_5fmonitor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable
      serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_system_5fmonitor_2eproto
namespace systemmonitor {
class CpuUsageRequest;
class CpuUsageRequestDefaultTypeInternal;
extern CpuUsageRequestDefaultTypeInternal _CpuUsageRequest_default_instance_;
class CpuUsageResponse;
class CpuUsageResponseDefaultTypeInternal;
extern CpuUsageResponseDefaultTypeInternal _CpuUsageResponse_default_instance_;
class DiskUsageRequest;
class DiskUsageRequestDefaultTypeInternal;
extern DiskUsageRequestDefaultTypeInternal _DiskUsageRequest_default_instance_;
class DiskUsageResponse;
class DiskUsageResponseDefaultTypeInternal;
extern DiskUsageResponseDefaultTypeInternal
    _DiskUsageResponse_default_instance_;
class MemoryUsageRequest;
class MemoryUsageRequestDefaultTypeInternal;
extern MemoryUsageRequestDefaultTypeInternal
    _MemoryUsageRequest_default_instance_;
class MemoryUsageResponse;
class MemoryUsageResponseDefaultTypeInternal;
extern MemoryUsageResponseDefaultTypeInternal
    _MemoryUsageResponse_default_instance_;
}  // namespace systemmonitor
namespace google {
namespace protobuf {
template <>
::systemmonitor::CpuUsageRequest*
Arena::CreateMaybeMessage<::systemmonitor::CpuUsageRequest>(Arena*);
template <>
::systemmonitor::CpuUsageResponse*
Arena::CreateMaybeMessage<::systemmonitor::CpuUsageResponse>(Arena*);
template <>
::systemmonitor::DiskUsageRequest*
Arena::CreateMaybeMessage<::systemmonitor::DiskUsageRequest>(Arena*);
template <>
::systemmonitor::DiskUsageResponse*
Arena::CreateMaybeMessage<::systemmonitor::DiskUsageResponse>(Arena*);
template <>
::systemmonitor::MemoryUsageRequest*
Arena::CreateMaybeMessage<::systemmonitor::MemoryUsageRequest>(Arena*);
template <>
::systemmonitor::MemoryUsageResponse*
Arena::CreateMaybeMessage<::systemmonitor::MemoryUsageResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace systemmonitor {

// ===================================================================

class CpuUsageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:systemmonitor.CpuUsageRequest)
                                                            */
{
 public:
  CpuUsageRequest();
  virtual ~CpuUsageRequest();

  CpuUsageRequest(const CpuUsageRequest& from);

  inline CpuUsageRequest& operator=(const CpuUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  CpuUsageRequest(CpuUsageRequest&& from) noexcept : CpuUsageRequest() {
    *this = ::std::move(from);
  }

  inline CpuUsageRequest& operator=(CpuUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CpuUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuUsageRequest* internal_default_instance() {
    return reinterpret_cast<const CpuUsageRequest*>(
        &_CpuUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  void Swap(CpuUsageRequest* other);
  friend void swap(CpuUsageRequest& a, CpuUsageRequest& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline CpuUsageRequest* New() const final {
    return CreateMaybeMessage<CpuUsageRequest>(NULL);
  }

  CpuUsageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CpuUsageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CpuUsageRequest& from);
  void MergeFrom(const CpuUsageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuUsageRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:systemmonitor.CpuUsageRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5fmonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CpuUsageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:systemmonitor.CpuUsageResponse)
                                                             */
{
 public:
  CpuUsageResponse();
  virtual ~CpuUsageResponse();

  CpuUsageResponse(const CpuUsageResponse& from);

  inline CpuUsageResponse& operator=(const CpuUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  CpuUsageResponse(CpuUsageResponse&& from) noexcept : CpuUsageResponse() {
    *this = ::std::move(from);
  }

  inline CpuUsageResponse& operator=(CpuUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CpuUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuUsageResponse* internal_default_instance() {
    return reinterpret_cast<const CpuUsageResponse*>(
        &_CpuUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  void Swap(CpuUsageResponse* other);
  friend void swap(CpuUsageResponse& a, CpuUsageResponse& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline CpuUsageResponse* New() const final {
    return CreateMaybeMessage<CpuUsageResponse>(NULL);
  }

  CpuUsageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CpuUsageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CpuUsageResponse& from);
  void MergeFrom(const CpuUsageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuUsageResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float usage_percent = 1;
  void clear_usage_percent();
  static const int kUsagePercentFieldNumber = 1;
  float usage_percent() const;
  void set_usage_percent(float value);

  // @@protoc_insertion_point(class_scope:systemmonitor.CpuUsageResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float usage_percent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5fmonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryUsageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:systemmonitor.MemoryUsageRequest)
                                                               */
{
 public:
  MemoryUsageRequest();
  virtual ~MemoryUsageRequest();

  MemoryUsageRequest(const MemoryUsageRequest& from);

  inline MemoryUsageRequest& operator=(const MemoryUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  MemoryUsageRequest(MemoryUsageRequest&& from) noexcept
      : MemoryUsageRequest() {
    *this = ::std::move(from);
  }

  inline MemoryUsageRequest& operator=(MemoryUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryUsageRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryUsageRequest*>(
        &_MemoryUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  void Swap(MemoryUsageRequest* other);
  friend void swap(MemoryUsageRequest& a, MemoryUsageRequest& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline MemoryUsageRequest* New() const final {
    return CreateMaybeMessage<MemoryUsageRequest>(NULL);
  }

  MemoryUsageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryUsageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryUsageRequest& from);
  void MergeFrom(const MemoryUsageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryUsageRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:systemmonitor.MemoryUsageRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5fmonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryUsageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:systemmonitor.MemoryUsageResponse)
                                                                */
{
 public:
  MemoryUsageResponse();
  virtual ~MemoryUsageResponse();

  MemoryUsageResponse(const MemoryUsageResponse& from);

  inline MemoryUsageResponse& operator=(const MemoryUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  MemoryUsageResponse(MemoryUsageResponse&& from) noexcept
      : MemoryUsageResponse() {
    *this = ::std::move(from);
  }

  inline MemoryUsageResponse& operator=(MemoryUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryUsageResponse* internal_default_instance() {
    return reinterpret_cast<const MemoryUsageResponse*>(
        &_MemoryUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  void Swap(MemoryUsageResponse* other);
  friend void swap(MemoryUsageResponse& a, MemoryUsageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryUsageResponse* New() const final {
    return CreateMaybeMessage<MemoryUsageResponse>(NULL);
  }

  MemoryUsageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryUsageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryUsageResponse& from);
  void MergeFrom(const MemoryUsageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryUsageResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float used_memory_mb = 1;
  void clear_used_memory_mb();
  static const int kUsedMemoryMbFieldNumber = 1;
  float used_memory_mb() const;
  void set_used_memory_mb(float value);

  // float total_memory_mb = 2;
  void clear_total_memory_mb();
  static const int kTotalMemoryMbFieldNumber = 2;
  float total_memory_mb() const;
  void set_total_memory_mb(float value);

  // @@protoc_insertion_point(class_scope:systemmonitor.MemoryUsageResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float used_memory_mb_;
  float total_memory_mb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5fmonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiskUsageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:systemmonitor.DiskUsageRequest)
                                                             */
{
 public:
  DiskUsageRequest();
  virtual ~DiskUsageRequest();

  DiskUsageRequest(const DiskUsageRequest& from);

  inline DiskUsageRequest& operator=(const DiskUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  DiskUsageRequest(DiskUsageRequest&& from) noexcept : DiskUsageRequest() {
    *this = ::std::move(from);
  }

  inline DiskUsageRequest& operator=(DiskUsageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskUsageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskUsageRequest* internal_default_instance() {
    return reinterpret_cast<const DiskUsageRequest*>(
        &_DiskUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;

  void Swap(DiskUsageRequest* other);
  friend void swap(DiskUsageRequest& a, DiskUsageRequest& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline DiskUsageRequest* New() const final {
    return CreateMaybeMessage<DiskUsageRequest>(NULL);
  }

  DiskUsageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiskUsageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiskUsageRequest& from);
  void MergeFrom(const DiskUsageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiskUsageRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:systemmonitor.DiskUsageRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5fmonitor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiskUsageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:systemmonitor.DiskUsageResponse)
                                                              */
{
 public:
  DiskUsageResponse();
  virtual ~DiskUsageResponse();

  DiskUsageResponse(const DiskUsageResponse& from);

  inline DiskUsageResponse& operator=(const DiskUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  DiskUsageResponse(DiskUsageResponse&& from) noexcept : DiskUsageResponse() {
    *this = ::std::move(from);
  }

  inline DiskUsageResponse& operator=(DiskUsageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskUsageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskUsageResponse* internal_default_instance() {
    return reinterpret_cast<const DiskUsageResponse*>(
        &_DiskUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;

  void Swap(DiskUsageResponse* other);
  friend void swap(DiskUsageResponse& a, DiskUsageResponse& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline DiskUsageResponse* New() const final {
    return CreateMaybeMessage<DiskUsageResponse>(NULL);
  }

  DiskUsageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiskUsageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiskUsageResponse& from);
  void MergeFrom(const DiskUsageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiskUsageResponse* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float used_disk_gb = 1;
  void clear_used_disk_gb();
  static const int kUsedDiskGbFieldNumber = 1;
  float used_disk_gb() const;
  void set_used_disk_gb(float value);

  // float total_disk_gb = 2;
  void clear_total_disk_gb();
  static const int kTotalDiskGbFieldNumber = 2;
  float total_disk_gb() const;
  void set_total_disk_gb(float value);

  // @@protoc_insertion_point(class_scope:systemmonitor.DiskUsageResponse)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float used_disk_gb_;
  float total_disk_gb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_system_5fmonitor_2eproto::TableStruct;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuUsageRequest

// -------------------------------------------------------------------

// CpuUsageResponse

// float usage_percent = 1;
inline void CpuUsageResponse::clear_usage_percent() { usage_percent_ = 0; }
inline float CpuUsageResponse::usage_percent() const {
  // @@protoc_insertion_point(field_get:systemmonitor.CpuUsageResponse.usage_percent)
  return usage_percent_;
}
inline void CpuUsageResponse::set_usage_percent(float value) {
  usage_percent_ = value;
  // @@protoc_insertion_point(field_set:systemmonitor.CpuUsageResponse.usage_percent)
}

// -------------------------------------------------------------------

// MemoryUsageRequest

// -------------------------------------------------------------------

// MemoryUsageResponse

// float used_memory_mb = 1;
inline void MemoryUsageResponse::clear_used_memory_mb() { used_memory_mb_ = 0; }
inline float MemoryUsageResponse::used_memory_mb() const {
  // @@protoc_insertion_point(field_get:systemmonitor.MemoryUsageResponse.used_memory_mb)
  return used_memory_mb_;
}
inline void MemoryUsageResponse::set_used_memory_mb(float value) {
  used_memory_mb_ = value;
  // @@protoc_insertion_point(field_set:systemmonitor.MemoryUsageResponse.used_memory_mb)
}

// float total_memory_mb = 2;
inline void MemoryUsageResponse::clear_total_memory_mb() {
  total_memory_mb_ = 0;
}
inline float MemoryUsageResponse::total_memory_mb() const {
  // @@protoc_insertion_point(field_get:systemmonitor.MemoryUsageResponse.total_memory_mb)
  return total_memory_mb_;
}
inline void MemoryUsageResponse::set_total_memory_mb(float value) {
  total_memory_mb_ = value;
  // @@protoc_insertion_point(field_set:systemmonitor.MemoryUsageResponse.total_memory_mb)
}

// -------------------------------------------------------------------

// DiskUsageRequest

// -------------------------------------------------------------------

// DiskUsageResponse

// float used_disk_gb = 1;
inline void DiskUsageResponse::clear_used_disk_gb() { used_disk_gb_ = 0; }
inline float DiskUsageResponse::used_disk_gb() const {
  // @@protoc_insertion_point(field_get:systemmonitor.DiskUsageResponse.used_disk_gb)
  return used_disk_gb_;
}
inline void DiskUsageResponse::set_used_disk_gb(float value) {
  used_disk_gb_ = value;
  // @@protoc_insertion_point(field_set:systemmonitor.DiskUsageResponse.used_disk_gb)
}

// float total_disk_gb = 2;
inline void DiskUsageResponse::clear_total_disk_gb() { total_disk_gb_ = 0; }
inline float DiskUsageResponse::total_disk_gb() const {
  // @@protoc_insertion_point(field_get:systemmonitor.DiskUsageResponse.total_disk_gb)
  return total_disk_gb_;
}
inline void DiskUsageResponse::set_total_disk_gb(float value) {
  total_disk_gb_ = value;
  // @@protoc_insertion_point(field_set:systemmonitor.DiskUsageResponse.total_disk_gb)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace systemmonitor

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_system_5fmonitor_2eproto
